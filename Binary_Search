#!@$%^&*()#!@$%^&*()#!@$%^&*()#!@$%^&*()#!@$%^&*()#!@$%^&*()#!@$%^&*()#!@$%^&*()#!@$%^&*()#!@$%^&*()#!@$%^&*()#!@$%^&*()#!@$%^&*()#!@$%^&*()#!@$%^&*()#!@$%^&*()#!@$%^&*()#!@$%^&*()#!@$%^&*()

# We are going to use a binary search approach in order to locate the index of where the target value belongs
# Otherwise if the target exists already in the array, return its index :: Time Complexity : O(log n) // Space complexity 𝑂(1)


def searchInsert(nums, target):
    left, right = 0, len(nums) - 1
    
    while left <= right:
        mid = (left + right) // 2
        
        if nums[mid] == target:
            return mid  # Target found, return the index
        elif nums[mid] < target:
            left = mid + 1  # Narrow the search to the right half
        else:
            right = mid - 1  # Narrow the search to the left half
    
    # If target is not found, `left` indicates the insertion point
    return left




nums = [1, 3, 5, 6]
target = 5
print(searchInsert(nums, target))  # Output: 2

target = 2
print(searchInsert(nums, target))  # Output: 1

target = 7
print(searchInsert(nums, target))  # Output: 4

